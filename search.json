[{"path":"https://stefanocoretta.github.io/phonetisr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 phonetisr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/articles/phonetise.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"Tokenise IPA transcriptions","text":"main function phonetisr phonetise(). function takes character vector IPA transcriptions splits phones. default settings tokenise IPA symbol separately, rather phone, default phonetisr concept “phone”. IPA diacritics tokenised separately. user can set diacritics = TRUE automatically tokenise diacritics preceding symbol (work course diacritics placed base symbol). example words , using diacritics = TRUE suffices. want control? can use multi argument specify phones made multiple characters. cases don’t want list tokenised phones, vector phones separated specified character (like space, dot). can set split = FALSE default separator (space) used separate phones resulting string. separator character can specified sep.","code":"library(phonetisr) ipa <- c(\"pʰãkʰ\", \"tʰum̥\", \"ɛkʰɯ\")  phonetise(ipa) #> [[1]] #> [1] \"p\" \"ʰ\" \"a\" \"̃\"  \"k\" \"ʰ\" #>  #> [[2]] #> [1] \"t\" \"ʰ\" \"u\" \"m\" \"̥\"  #>  #> [[3]] #> [1] \"ɛ\" \"k\" \"ʰ\" \"ɯ\" phonetise(ipa, diacritics = TRUE) #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\" ph <- c(\"pʰ\", \"tʰ\", \"kʰ\", \"ã\", \"m̥\")  phonetise(ipa, multi = ph) #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\" phonetise(ipa, multi = ph, split = FALSE, sep = \".\") #> [1] \"pʰ.ã.kʰ\" \"tʰ.u.m̥\"  \"ɛ.kʰ.ɯ\""},{"path":"https://stefanocoretta.github.io/phonetisr/articles/phonetise.html","id":"using-tibbles","dir":"Articles","previous_headings":"","what":"Using tibbles","title":"Tokenise IPA transcriptions","text":"common use case phonetise() function tibble columns IPA transcriptions. phonetisr package comes kl_swades, tibble 195 Klingon words IPA transcription. Let’s phonetise ipa column. first want define multi-character phones. , can use mutate() create new column phones phonetised transcriptions. phones “list” column, kl_swadesh “nested”: see Nested data vignette tidyr. common operation count number occurrences phone. can easily first “unnesting” phones column. can count phone count(). also plot counts.","code":"library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ ggplot2   3.5.1     ✔ tibble    3.2.1 #> ✔ lubridate 1.9.4     ✔ tidyr     1.3.1 #> ✔ purrr     1.0.4      #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors data(\"kl_swadesh\") kl_swadesh #> # A tibble: 195 × 4 #>       id gloss          translit ipa   #>    <int> <chr>          <chr>    <chr> #>  1     1 I              jIH      dʒɪx  #>  2     2 you (singular) SoH      ʂox   #>  3     3 he             ghaH     ɣɑx   #>  4     4 we             maH      mɑx   #>  5     5 you (plural)   tlhIH    tɬɪx  #>  6     6 they           chaH     tʃɑx  #>  7     7 this           -vam     -vɑm  #>  8     8 that           -vetlh   -vɛtɬ #>  9     9 here           naDev    nɑɖɛv #> 10    10 there          pa'      pʰɑʔ  #> # ℹ 185 more rows kl_multi <- c(   \"pʰ\", \"tʰ\", \"qʰ\",   \"tɬ\", \"tʃ\", \"qχ\",    \"dʒ\" ) kl_swadesh <- kl_swadesh |>    mutate(     phones = phonetise(ipa, multi = kl_multi)   ) #> ℹ The following non-IPA characters were found and removed: - #>   kl_swadesh #> # A tibble: 195 × 5 #>       id gloss          translit ipa   phones    #>    <int> <chr>          <chr>    <chr> <list>    #>  1     1 I              jIH      dʒɪx  <chr [3]> #>  2     2 you (singular) SoH      ʂox   <chr [3]> #>  3     3 he             ghaH     ɣɑx   <chr [3]> #>  4     4 we             maH      mɑx   <chr [3]> #>  5     5 you (plural)   tlhIH    tɬɪx  <chr [3]> #>  6     6 they           chaH     tʃɑx  <chr [3]> #>  7     7 this           -vam     -vɑm  <chr [3]> #>  8     8 that           -vetlh   -vɛtɬ <chr [3]> #>  9     9 here           naDev    nɑɖɛv <chr [5]> #> 10    10 there          pa'      pʰɑʔ  <chr [3]> #> # ℹ 185 more rows kl_unnest <- kl_swadesh |>    unnest(phones) kl_unnest #> # A tibble: 651 × 5 #>       id gloss          translit ipa   phones #>    <int> <chr>          <chr>    <chr> <chr>  #>  1     1 I              jIH      dʒɪx  dʒ     #>  2     1 I              jIH      dʒɪx  ɪ      #>  3     1 I              jIH      dʒɪx  x      #>  4     2 you (singular) SoH      ʂox   ʂ      #>  5     2 you (singular) SoH      ʂox   o      #>  6     2 you (singular) SoH      ʂox   x      #>  7     3 he             ghaH     ɣɑx   ɣ      #>  8     3 he             ghaH     ɣɑx   ɑ      #>  9     3 he             ghaH     ɣɑx   x      #> 10     4 we             maH      mɑx   m      #> # ℹ 641 more rows kl_unnest |>    count(phones, sort = TRUE) #> # A tibble: 26 × 2 #>    phones     n #>    <chr>  <int> #>  1 ɑ         65 #>  2 o         50 #>  3 ʔ         40 #>  4 ɪ         38 #>  5 u         34 #>  6 x         31 #>  7 ɣ         30 #>  8 ɛ         29 #>  9 ʂ         28 #> 10 m         25 #> # ℹ 16 more rows kl_unnest |>    count(phones, sort = TRUE) |>    ggplot(aes(reorder(phones, desc(n)), n)) +   geom_bar(stat = \"identity\")"},{"path":"https://stefanocoretta.github.io/phonetisr/articles/phonetise.html","id":"add-phonetic-features","dir":"Articles","previous_headings":"","what":"Add phonetic features","title":"Tokenise IPA transcriptions","text":"package comes function featurise() takes vector list phonetised words returns tibble counts phonetic features phones. can use info plotting.  featurise() uses info stored ipa_symbols, comes package. Note phonetic features included based IPA tables: package aware language-specific features.","code":"kl_feat <- featurise(kl_swadesh$phones) kl_feat #> # A tibble: 26 × 17 #>    phone count base  unicode uni_name ipa_name phon_type type  height_ipa height #>    <chr> <int> <chr> <chr>   <chr>    <chr>    <chr>     <chr> <chr>      <chr>  #>  1 w         8 w     U+0077  latin s… voiced … base      cons… NA         NA     #>  2 j        10 j     U+006A  latin s… voiced … base      cons… NA         NA     #>  3 ŋ        12 ŋ     U+014B  latin s… voiced … base      cons… NA         NA     #>  4 tɬ       14 t     U+0074  latin s… voicele… base      cons… NA         NA     #>  5 r        15 r     U+0072  latin s… voiced … base      cons… NA         NA     #>  6 tʰ       16 t     U+0074  latin s… voicele… base      cons… NA         NA     #>  7 v        17 v     U+0076  latin s… voiced … base      cons… NA         NA     #>  8 l        19 l     U+006C  latin s… voiced … base      cons… NA         NA     #>  9 pʰ       19 p     U+0070  latin s… voicele… base      cons… NA         NA     #> 10 dʒ       20 d     U+0064  latin s… voiced … base      cons… NA         NA     #> # ℹ 16 more rows #> # ℹ 7 more variables: backness <chr>, rounding <chr>, voicing <chr>, #> #   place <chr>, manner <chr>, lateral <lgl>, sonorant <lgl> kl_feat |>    ggplot(aes(reorder(phone, desc(count)), count, fill = type)) +   geom_bar(stat = \"identity\") data(\"ipa_symbols\") ipa_symbols #> # A tibble: 188 × 15 #>    IPA   unicode uni_name    ipa_name phon_type type  height_ipa height backness #>    <chr> <chr>   <chr>       <chr>    <chr>     <chr> <chr>      <chr>  <chr>    #>  1 a     U+0061  latin smal… open fr… base      vowel open       low    front    #>  2 æ     U+00E6  latin smal… raised … base      vowel raised op… low_r… front    #>  3 ɐ     U+0250  latin smal… lowered… base      vowel lowered    low_r… central  #>  4 ɑ     U+0251  latin smal… open ba… base      vowel open       low    back     #>  5 ɒ     U+0252  latin smal… open ba… base      vowel open       low    back     #>  6 b     U+0062  latin smal… voiced … base      cons… NA         NA     NA       #>  7 ʙ     U+0299  latin lett… voiced … base      cons… NA         NA     NA       #>  8 ɓ     U+0253  latin smal… voiced … base      cons… NA         NA     NA       #>  9 c     U+0063  latin smal… voicele… base      cons… NA         NA     NA       #> 10 ç     U+00E7  latin smal… voicele… base      cons… NA         NA     NA       #> # ℹ 178 more rows #> # ℹ 6 more variables: rounding <chr>, voicing <chr>, place <chr>, manner <chr>, #> #   lateral <lgl>, sonorant <lgl>"},{"path":"https://stefanocoretta.github.io/phonetisr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefano Coretta. Author, maintainer.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coretta S (2025). phonetisr: Naive IPA Tokeniser. R package version 0.1.0, https://stefanocoretta.github.io/phonetisr/, https://github.com/stefanocoretta/phonetisr.","code":"@Manual{,   title = {phonetisr: A Naive IPA Tokeniser},   author = {Stefano Coretta},   year = {2025},   note = {R package version 0.1.0,     https://stefanocoretta.github.io/phonetisr/},   url = {https://github.com/stefanocoretta/phonetisr}, }"},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"phonetisr-a-naive-ipa-tokeniser","dir":"","previous_headings":"","what":"A Naive IPA Tokeniser","title":"A Naive IPA Tokeniser","text":"package (naive) tokeniser phonetic transcriptions International Phonetic Alphabet (IPA). phonetisr, can parse texts word lists transcribed IPA tokenise phones can perform quantitative analyses.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Naive IPA Tokeniser","text":"Phonetisr CRAN can install install.packages(\"phonetisr\"). can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"stefanocoretta/phonetisr@devel\")"},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Naive IPA Tokeniser","text":"","code":"library(phonetisr)  # IPA strings to be tokenised ipa <- c(\"pʰãkʰ\", \"tʰum̥\", \"ɛkʰɯ\")  # List of character sequences to be considered single phones ph <- c(\"pʰ\", \"tʰ\", \"kʰ\", \"ã\", \"m̥\")  # Tokenise strings phonetise(ipa, multi = ph) #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\""},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"A Naive IPA Tokeniser","text":"Scan illegal (non-IPA) characters. Provide list default multi-character phones. Functions data import/export. Ignore diacritics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":null,"dir":"Reference","previous_headings":"","what":"Add features to list of phones — featurise","title":"Add features to list of phones — featurise","text":"function counts occurrences phones includes basic phonetic features.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add features to list of phones — featurise","text":"","code":"featurise(phlist)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add features to list of phones — featurise","text":"phlist list phones output phonetise().","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add features to list of phones — featurise","text":"tibble.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add features to list of phones — featurise","text":"","code":"ipa <- c(\"ada\", \"buba\", \"kiki\", \"sa\\u0283a\") ip_ph <- phonetise(ipa) featurise(ip_ph) #> # A tibble: 8 × 17 #>   phone count base  unicode uni_name  ipa_name phon_type type  height_ipa height #>   <chr> <int> <chr> <chr>   <chr>     <chr>    <chr>     <chr> <chr>      <chr>  #> 1 d         1 d     U+0064  latin sm… voiced … base      cons… NA         NA     #> 2 s         1 s     U+0073  latin sm… voicele… base      cons… NA         NA     #> 3 u         1 u     U+0075  latin sm… close b… base      vowel close      high   #> 4 ʃ         1 ʃ     U+0283  latin sm… voicele… base      cons… NA         NA     #> 5 b         2 b     U+0062  latin sm… voiced … base      cons… NA         NA     #> 6 i         2 i     U+0069  latin sm… close f… base      vowel close      high   #> 7 k         2 k     U+006B  latin sm… voicele… base      cons… NA         NA     #> 8 a         5 a     U+0061  latin sm… open fr… base      vowel open       low    #> # ℹ 7 more variables: backness <chr>, rounding <chr>, voicing <chr>, #> #   place <chr>, manner <chr>, lateral <lgl>, sonorant <lgl>"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get non-IPA characters. — get_no_ipa","title":"Get non-IPA characters. — get_no_ipa","text":"Given vector characters, returns part IPA.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get non-IPA characters. — get_no_ipa","text":"","code":"get_no_ipa(chars)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get non-IPA characters. — get_no_ipa","text":"chars vector characters.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get non-IPA characters. — get_no_ipa","text":"vector.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get non-IPA characters. — get_no_ipa","text":"","code":"get_no_ipa(c(\"a\", \"\\0283\", \">\")) #> [1] \"\\00283\" \">\""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"List of IPA symbols — ipa_symbols","title":"List of IPA symbols — ipa_symbols","text":"List IPA symbols","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of IPA symbols — ipa_symbols","text":"","code":"ipa_symbols"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of IPA symbols — ipa_symbols","text":"data frame 143 rows 12 variables: IPA IPA symbol. unicode Unicode code. uni_name Unicode name. ipa_name IPA name. phon_type phonetic type symbol. type General character type (consonant, vowel, diacritic). height_ipa Vowel openness. height Vowel height. backness Vowel backness. rounding Vowel rounding. voicing Consonant voicing. place Consonant place articulation. manner Consonant manner articulation. lateral consonant lateral? sonorant phone sonorant?","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Klingon Swadesh list — kl_swadesh","title":"Klingon Swadesh list — kl_swadesh","text":"Swadesh list Klingon.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Klingon Swadesh list — kl_swadesh","text":"","code":"kl_swadesh"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Klingon Swadesh list — kl_swadesh","text":"data frame 195 rows 4 variables: id Swadesh list item number. gloss English gloss. translit Klingon transliteration. ipa IPA transcription.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search phones — ph_search","title":"Search phones — ph_search","text":"Given vector phonetised strings, find phones.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search phones — ph_search","text":"","code":"ph_search(phlist, phonex)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search phones — ph_search","text":"phlist output phonetise(). phonex phonetic expression. Supported shorthands C consonant, V vowel, # word boundary.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search phones — ph_search","text":"list.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search phones — ph_search","text":"","code":"ipa <- c(\"p\\u02B0a\\u0303k\\u02B0\", \"t\\u02B0um\\u0325\", \"\\u025Bk\\u02B0\\u026F\", \"pun\") ph <- c(\"p\\u02B0\", \"t\\u02B0\", \"k\\u02B0\", \"a\\u0303\", \"m\\u0325\") ipa_ph <- phonetise(ipa, multi = ph) ph_search(ipa_ph, \"#CV\") #> [[1]] #> [1] \"pʰã\" #>  #> [[2]] #> [1] \"tʰu\" #>  #> [[3]] #> character(0) #>  #> [[4]] #> [1] \"pu\" #>   # partial matches are also returned ph_search(ipa_ph, \"p\") #> [[1]] #> [1] \"p\" #>  #> [[2]] #> character(0) #>  #> [[3]] #> character(0) #>  #> [[4]] #> [1] \"p\" #>   # use regular expressions ph_search(ipa_ph, \"p\\u02B0?V\") #> [[1]] #> [1] \"pʰã\" #>  #> [[2]] #> character(0) #>  #> [[3]] #> character(0) #>  #> [[4]] #> [1] \"pu\" #>"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":null,"dir":"Reference","previous_headings":"","what":"Tokenise IPA strings — phonetise","title":"Tokenise IPA strings — phonetise","text":"phonetise() tokenises strings IPA symbols (like phonetic transcriptions words) individual \"phones\". output list.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tokenise IPA strings — phonetise","text":"","code":"phonetise(   strings,   multi = NULL,   regex = NULL,   split = TRUE,   sep = \" \",   sanitise = TRUE,   ignore_stress = TRUE,   ignore_tone = TRUE,   diacritics = FALSE,   affricates = FALSE,   v_sequences = FALSE,   prenasalised = FALSE,   all_multi = FALSE,   sanitize = sanitise )  phonetize(   strings,   multi = NULL,   regex = NULL,   split = TRUE,   sep = \" \",   sanitise = TRUE,   ignore_stress = TRUE,   ignore_tone = TRUE,   diacritics = FALSE,   affricates = FALSE,   v_sequences = FALSE,   prenasalised = FALSE,   all_multi = FALSE,   sanitize = sanitise )"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tokenise IPA strings — phonetise","text":"strings character vector list words IPA. multi character vector one multi-character phones strings. regex string regular expression match several multi-character phones. split set TRUE (default), tokenised strings split phones (.e. output vector one element per phone). set FALSE, string split phones separated character defined sep. sep character used separator phones split = FALSE (default  , space). sanitise Whether remove non-IPA characters (TRUE default). ignore_stress TRUE (default), stress marks parsed. ignore_tone TRUE (default), tone marks letters parsed. diacritics set TRUE, parses valid diacritics part previous character (FALSE default). affricates set TRUE, parses homorganic stop + fricative affricates. v_sequences set TRUE, collapses vowel sequences (FALSE default). prenasalised set TRUE, parses prenasalised consonants (FALSE default). all_multi set TRUE, diacritics, affricates, v_sequences prenasalised set TRUE. sanitize Alias sanitise.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tokenise IPA strings — phonetise","text":"list phonetised strings.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tokenise IPA strings — phonetise","text":"","code":"# using unicode escapes for CRAN policy ipa <- c(\"p\\u02B0a\\u0303k\\u02B0\", \"t\\u02B0um\\u0325\", \"\\u025Bk\\u02B0\\u026F\") ph <- c(\"p\\u02B0\", \"t\\u02B0\", \"k\\u02B0\", \"a\\u0303\", \"m\\u0325\")  phonetise(ipa, multi = ph) #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   ph_2 <- ph[4:5]  # Match any character followed by <\\u02B0> with \".\\u02B0\". phonetise(ipa, multi = ph_2, regex = \".\\u02B0\") #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   # Same result. phonetise(ipa, regex = \".(\\u0303|\\u0325|\\u02B0)\") #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   # Don't split strings and use \".\" as separator phonetise(ipa, multi = ph, split = FALSE, sep = \".\") #> [1] \"pʰ.ã.kʰ\" \"tʰ.u.m̥\"  \"ɛ.kʰ.ɯ\""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetisr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phonetisr: A Naive IPA Tokeniser — phonetisr-package","title":"phonetisr: A Naive IPA Tokeniser — phonetisr-package","text":"provides users functions parse International Phonetic Alphabet (IPA) transcriptions individual phones (tokenisation) based default IPA symbols optional user specified multi-character phones. tokenised transcriptions can used obtaining counts phones searching words matching phonetic patterns.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetisr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phonetisr: A Naive IPA Tokeniser — phonetisr-package","text":"Maintainer: Stefano Coretta stefano.coretta@gmail.com (ORCID)","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"phonetisr-v010","dir":"Changelog","previous_headings":"","what":"phonetisr v0.1.0","title":"phonetisr v0.1.0","text":"CRAN release: 2025-02-26 Added vignette. Updated documentation featurise().","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"fixed-0-0-5","dir":"Changelog","previous_headings":"","what":"Fixed","title":"phonetisr v0.0.5","text":"Corrected documentation phonetise(). Fixed wrong parsing <ç>. Fixed missing featurisation <ç>.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-4","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.4","text":"ph_search() search extract phones phonetic expressions.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"fixed-0-0-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"phonetisr v0.0.4","text":"featurise() now correctly finds base non-space-modifying characters.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-3","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.3","text":"ignore_stress ignore_tone phonetise() ignore remove stress tone diacritics letters. TRUE default. all_multi argument phonetise() sets diacritics, affricates, v_sequences prenasalised TRUE. prenasalised argument phonetise() parses prenasalised consonants single phones. Added Unicode blocks Phonetic Extensions Phonetic Extensions Supplement. sanitise = TRUE prints message info removed non-IPA characters found.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"changed-0-0-3","dir":"Changelog","previous_headings":"","what":"Changed","title":"phonetisr v0.0.3","text":"Improved base phone detection featurise(). ipa_symbols now includes column (phon_type) differentiates base characters secondary articulations, vowel/consonant articulation, stress, tone, . split = FALSE phonetise(), output character vector rather list.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"phonetisr v0.0.2","text":"default_multi renamed diacritics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-2","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.2","text":"affricates argument phonetise() parse homorganic “stop + fricative” clusters affricates. v_sequences argument phonetise() collapse vowel sequences. featurise() count phones add features.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"changed-0-0-1","dir":"Changelog","previous_headings":"","what":"Changed","title":"phonetisr v0.0.1","text":"phonetise() gained two new arguments: split sep.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.0.9000","text":"phonetise() tokenise phones IPA transcriptions. kl_swadesh.rda Swadesh list Klingon transliteration IPA transcription. ipa_symbols.rda info IPA symbols.","code":""}]
