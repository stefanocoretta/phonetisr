[{"path":"https://stefanocoretta.github.io/phonetisr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 phonetisr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefano Coretta. Author, maintainer.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coretta S (2023). phonetisr: Naive IPA Tokeniser. R package version 0.0.5, https://stefanocoretta.github.io/phonetisr/.","code":"@Manual{,   title = {phonetisr: A Very Naive IPA Tokeniser},   author = {Stefano Coretta},   year = {2023},   note = {R package version 0.0.5},   url = {https://stefanocoretta.github.io/phonetisr/}, }"},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"phonetisr-a-very-naive-ipa-tokeniser","dir":"","previous_headings":"","what":"A Very Naive IPA Tokeniser","title":"A Very Naive IPA Tokeniser","text":"package (naive) tokeniser phonetic transcriptions International Phonetic Alphabet (IPA). phonetisr, can parse texts word lists transcribed IPA tokenise phones can perform quantitative analyses.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Very Naive IPA Tokeniser","text":"can install development version GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"stefanocoretta/phonetisr@v0.0.5\")"},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"A Very Naive IPA Tokeniser","text":"","code":"library(phonetisr)  # IPA strings to be tokenised ipa <- c(\"pʰãkʰ\", \"tʰum̥\", \"ɛkʰɯ\")  # List of character sequences to be considered single phones ph <- c(\"pʰ\", \"tʰ\", \"kʰ\", \"ã\", \"m̥\")  # Tokenise strings phonetise(ipa, multi = ph)"},{"path":"https://stefanocoretta.github.io/phonetisr/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"A Very Naive IPA Tokeniser","text":"Scan illegal (non-IPA) characters. Provide list default multi-character phones. Functions data import/export. Ignore diacritics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":null,"dir":"Reference","previous_headings":"","what":"Add features to list of phones — featurise","title":"Add features to list of phones — featurise","text":"function counts occurrences phones includes basic phonetic features.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add features to list of phones — featurise","text":"","code":"featurise(phlist)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add features to list of phones — featurise","text":"phlist list phones output phonetise().","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/featurise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add features to list of phones — featurise","text":"tibble.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":null,"dir":"Reference","previous_headings":"","what":"Get non-IPA characters. — get_no_ipa","title":"Get non-IPA characters. — get_no_ipa","text":"Given vector characters, returns part IPA.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get non-IPA characters. — get_no_ipa","text":"","code":"get_no_ipa(chars)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get non-IPA characters. — get_no_ipa","text":"chars vector characters.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get non-IPA characters. — get_no_ipa","text":"vector.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/get_no_ipa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get non-IPA characters. — get_no_ipa","text":"","code":"get_no_ipa(c(\"a\", \"ʃ\", \">\")) #> [1] \">\""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":null,"dir":"Reference","previous_headings":"","what":"List of IPA symbols — ipa_symbols","title":"List of IPA symbols — ipa_symbols","text":"List IPA symbols","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List of IPA symbols — ipa_symbols","text":"","code":"ipa_symbols"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ipa_symbols.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"List of IPA symbols — ipa_symbols","text":"data frame 143 rows 12 variables: IPA IPA symbol. unicode Unicode code. uni_name Unicode name. ipa_name IPA name. phon_type phonetic type symbol. type General character type (consonant, vowel, diacritic). height_ipa Vowel openness. height Vowel height. backness Vowel backness. rounding Vowel rounding. voicing Consonant voicing. place Consonant place articulation. manner Consonant manner articulation. lateral consonant lateral? sonorant phone sonorant?","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Klingon Swadesh list — kl_swadesh","title":"Klingon Swadesh list — kl_swadesh","text":"Swadesh list Klingon.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Klingon Swadesh list — kl_swadesh","text":"","code":"kl_swadesh"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/kl_swadesh.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Klingon Swadesh list — kl_swadesh","text":"data frame 195 rows 4 variables: id Swadesh list item number. gloss English gloss. translit Klingon transliteration. ipa IPA transcription.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Search phones — ph_search","title":"Search phones — ph_search","text":"Given list phonetised strings, find phones.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Search phones — ph_search","text":"","code":"ph_search(phlist, phonex)"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Search phones — ph_search","text":"phlist list phones output phonetise(). phonex phonetic expression. Supported shorthands C consonant, V vowel, # word boundary.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Search phones — ph_search","text":"list.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/ph_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Search phones — ph_search","text":"","code":"ipa <- c(\"pʰãkʰ\", \"tʰum̥\", \"ɛkʰɯ\") ph <- c(\"pʰ\", \"tʰ\", \"kʰ\", \"ã\", \"m̥\") ipa_ph <- phonetise(ipa, multi = ph) ph_search(ipa_ph, \"#CV\") #> [[1]] #> [[1]][[1]] #> [1] \"pʰã\" #>  #>  #> [[2]] #> [[2]][[1]] #> [1] \"tʰu\" #>  #>  #> [[3]] #> [[3]][[1]] #> character(0) #>  #>"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":null,"dir":"Reference","previous_headings":"","what":"Tokenise IPA strings — phonetise","title":"Tokenise IPA strings — phonetise","text":"phonetise() tokenises strings IPA symbols (like phonetic transcriptions words) individual \"phones\". output list.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tokenise IPA strings — phonetise","text":"","code":"phonetise(   strings,   multi = NULL,   regex = NULL,   split = TRUE,   sep = \" \",   sanitise = TRUE,   ignore_stress = TRUE,   ignore_tone = TRUE,   diacritics = FALSE,   affricates = FALSE,   v_sequences = FALSE,   prenasalised = FALSE,   all_multi = FALSE,   sanitize = sanitise )  phonetize(   strings,   multi = NULL,   regex = NULL,   split = TRUE,   sep = \" \",   sanitise = TRUE,   ignore_stress = TRUE,   ignore_tone = TRUE,   diacritics = FALSE,   affricates = FALSE,   v_sequences = FALSE,   prenasalised = FALSE,   all_multi = FALSE,   sanitize = sanitise )"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tokenise IPA strings — phonetise","text":"strings character vector list words IPA. multi character vector one multi-character phones strings. regex string regular expression match several multi-character phones. split set TRUE (default), tokenised strings split phones (.e. output vector one element per phone). set FALSE, string split phones separated character defined sep. sep character used separator phones split = FALSE (default  , space). sanitise Whether remove non-IPA characters (TRUE default). ignore_stress TRUE (default), stress marks parsed. ignore_tone TRUE (default), tone marks letters parsed. diacritics set TRUE, parses valid diacritics part previous character (FALSE default). affricates set TRUE, parses homorganic stop + fricative affricates. v_sequences set TRUE, collapses vowel sequences (FALSE default). prenasalised set TRUE, parses prenasalised consonants (FALSE default). all_multi set TRUE, diacritics, affricates, v_sequences prenasalised set TRUE. sanitize Alias sanitise.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tokenise IPA strings — phonetise","text":"list.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tokenise IPA strings — phonetise","text":"","code":"ipa <- c(\"pʰãkʰ\", \"tʰum̥\", \"ɛkʰɯ\") ph <- c(\"pʰ\", \"tʰ\", \"kʰ\", \"ã\", \"m̥\")  phonetise(ipa, multi = ph) #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   ph_2 <- ph[4:5]  # Match any character followed by <ʰ> with \".ʰ\". phonetise(ipa, multi = ph_2, regex = \".ʰ\") #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   # Same result. phonetise(ipa, regex = \".(\\u0303|\\u0325|\\u02B0)\") #> [[1]] #> [1] \"pʰ\" \"ã\"  \"kʰ\" #>  #> [[2]] #> [1] \"tʰ\" \"u\"  \"m̥\"  #>  #> [[3]] #> [1] \"ɛ\"  \"kʰ\" \"ɯ\"  #>   # Don't split strings and use \".\" as separator phonetise(ipa, multi = ph, split = FALSE, sep = \".\") #> [1] \"pʰ.ã.kʰ\" \"tʰ.u.m̥\"  \"ɛ.kʰ.ɯ\""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetisr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phonetisr: A Very Naive IPA Tokeniser — phonetisr-package","title":"phonetisr: A Very Naive IPA Tokeniser — phonetisr-package","text":"package (one paragraph).","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/reference/phonetisr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phonetisr: A Very Naive IPA Tokeniser — phonetisr-package","text":"Maintainer: Stefano Coretta stefano.coretta@gmail.com (ORCID)","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"fixed-0-0-5","dir":"Changelog","previous_headings":"","what":"Fixed","title":"phonetisr v0.0.5","text":"Corrected documentation phonetise(). Fixed wrong parsing . Fixed missing featurisation .","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-4","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.4","text":"ph_search() search extract phones phonetic expressions.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"fixed-0-0-4","dir":"Changelog","previous_headings":"","what":"Fixed","title":"phonetisr v0.0.4","text":"featurise() now correctly finds base non-space-modifying characters.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-3","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.3","text":"ignore_stress ignore_tone phonetise() ignore remove stress tone diacritics letters. TRUE default. all_multi argument phonetise() sets diacritics, affricates, v_sequences prenasalised TRUE. prenasalised argument phonetise() parses prenasalised consonants single phones. Added Unicode blocks Phonetic Extensions Phonetic Extensions Supplement. sanitise = TRUE prints message info removed non-IPA characters found.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"changed-0-0-3","dir":"Changelog","previous_headings":"","what":"Changed","title":"phonetisr v0.0.3","text":"Improved base phone detection featurise(). ipa_symbols now includes column (phon_type) differentiates base characters secondary articulations, vowel/consonant articulation, stress, tone, . split = FALSE phonetise(), output character vector rather list.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"breaking-changes-0-0-2","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"phonetisr v0.0.2","text":"default_multi renamed diacritics.","code":""},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-2","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.2","text":"affricates argument phonetise() parse homorganic “stop + fricative” clusters affricates. v_sequences argument phonetise() collapse vowel sequences. featurise() count phones add features.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"changed-0-0-1","dir":"Changelog","previous_headings":"","what":"Changed","title":"phonetisr v0.0.1","text":"phonetise() gained two new arguments: split sep.","code":""},{"path":[]},{"path":"https://stefanocoretta.github.io/phonetisr/news/index.html","id":"added-0-0-0-9000","dir":"Changelog","previous_headings":"","what":"Added","title":"phonetisr v0.0.0.9000","text":"phonetise() tokenise phones IPA transcriptions. kl_swadesh.rda Swadesh list Klingon transliteration IPA transcription. ipa_symbols.rda info IPA symbols.","code":""}]
